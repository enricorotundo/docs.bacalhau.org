"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[457],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8388:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_label:"Image Processing",sidebar_position:3},l="Image Processing",u={unversionedId:"demos/image-processing",id:"demos/image-processing",title:"Image Processing",description:"Introduction",source:"@site/docs/demos/image-processing.md",sourceDirName:"demos",slug:"/demos/image-processing",permalink:"/demos/image-processing",editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/demos/image-processing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Image Processing",sidebar_position:3},sidebar:"documentationSidebar",previous:{title:"List",permalink:"/demos/list"},next:{title:"CLI Flags",permalink:"/cli-flags/all-flags"}},c=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Getting Started",id:"getting-started",children:[],level:2}],p={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"image-processing"},"Image Processing"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Often, you will need to process a number of images across an entire set hosted on IPFS. For example, the entire ",(0,o.kt)("a",{parentName:"p",href:"http://cloudflare-ipfs.com/ipfs/QmeZRGhe4PmjctYVSVHuEiA9oSXnqmYa4kQubSHgWbjv72"},"Landsat data dataset is hosted on IPFS"),". This is many thousands of images, it would be very convenient to run a job against the data without having to download it!"),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"In this example we will be working against a small ",(0,o.kt)("a",{parentName:"p",href:"http://cloudflare-ipfs.com/ipfs/QmeZRGhe4PmjctYVSVHuEiA9oSXnqmYa4kQubSHgWbjv72"},"subset of the dataset"),". We will go through a demo similar to what you may need to do at scale: resizing all the images down to 100x100px."),(0,o.kt)("p",null,"To get started with a new concept, ",(0,o.kt)("inlineCode",{parentName:"p"},"bacalhau run")," takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"-v")," argument just like Docker, except the left hand side of the argument is a CID. This is a ",(0,o.kt)("em",{parentName:"p"},"data volume")," and can mount in an entire directory (instead of a single file)."),(0,o.kt)("p",null,"When you set this flag, it then ensures that CID is mounted into the container at the desired location as an input volume."),(0,o.kt)("p",null,"Data volumes also work on output - ",(0,o.kt)("inlineCode",{parentName:"p"},"bacalhau run")," also supports a ",(0,o.kt)("inlineCode",{parentName:"p"},"-o")," argument for output volumes. This is where you write the results of your job. See below for an example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau run \\\n  -v QmeZRGhe4PmjctYVSVHuEiA9oSXnqmYa4kQubSHgWbjv72:/input_images \\\n  -o results:/output_images \\\n  dpokidov/imagemagick \\\n  -- magick mogrify -resize 100x100 -quality 100 -path /output_images /input_images/*.jpg\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau list --sort-by=id --reverse --id-filter= JOB_ID\n")),(0,o.kt)("p",null,"Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"JOB_ID")," with the first part of the job id from the last step."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," ID        JOB          INPUTS  OUTPUTS  CONCURRENCY  NODE      STATE         RESULT\n eb9e5f9e  docker d...       1        1               QmdZQ7Zb  complete      /ipfs/QmWngMTGcn4rM81ePQjMvAEm7rMT4brWh2DXTxD71Le532\n")),(0,o.kt)("p",null,"Go look at the ",(0,o.kt)("a",{parentName:"p",href:"http://cloudflare-ipfs.com/ipfs/QmWngMTGcn4rM81ePQjMvAEm7rMT4brWh2DXTxD71Le532"},"output"),"!"))}m.isMDXComponent=!0}}]);